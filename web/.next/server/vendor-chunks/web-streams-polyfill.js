"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web-streams-polyfill";
exports.ids = ["vendor-chunks/web-streams-polyfill"];
exports.modules = {

/***/ "(rsc)/../node_modules/web-streams-polyfill/dist/ponyfill.mjs":
/*!**************************************************************!*\
  !*** ../node_modules/web-streams-polyfill/dist/ponyfill.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteLengthQueuingStrategy: () => (/* binding */ ByteLengthQueuingStrategy),\n/* harmony export */   CountQueuingStrategy: () => (/* binding */ CountQueuingStrategy),\n/* harmony export */   ReadableByteStreamController: () => (/* binding */ ReadableByteStreamController),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   ReadableStreamBYOBReader: () => (/* binding */ ReadableStreamBYOBReader),\n/* harmony export */   ReadableStreamBYOBRequest: () => (/* binding */ ReadableStreamBYOBRequest),\n/* harmony export */   ReadableStreamDefaultController: () => (/* binding */ ReadableStreamDefaultController),\n/* harmony export */   ReadableStreamDefaultReader: () => (/* binding */ ReadableStreamDefaultReader),\n/* harmony export */   TransformStream: () => (/* binding */ TransformStream),\n/* harmony export */   TransformStreamDefaultController: () => (/* binding */ TransformStreamDefaultController),\n/* harmony export */   WritableStream: () => (/* binding */ WritableStream),\n/* harmony export */   WritableStreamDefaultController: () => (/* binding */ WritableStreamDefaultController),\n/* harmony export */   WritableStreamDefaultWriter: () => (/* binding */ WritableStreamDefaultWriter)\n/* harmony export */ });\n/**\n * @license\n * web-streams-polyfill v4.0.0-beta.3\n * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */ const e = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? Symbol : (e)=>`Symbol(${e})`;\nfunction t() {}\nfunction r(e) {\n    return \"object\" == typeof e && null !== e || \"function\" == typeof e;\n}\nconst o = t;\nfunction n(e, t) {\n    try {\n        Object.defineProperty(e, \"name\", {\n            value: t,\n            configurable: !0\n        });\n    } catch (e) {}\n}\nconst a = Promise, i = Promise.prototype.then, l = Promise.resolve.bind(a), s = Promise.reject.bind(a);\nfunction u(e) {\n    return new a(e);\n}\nfunction c(e) {\n    return l(e);\n}\nfunction d(e) {\n    return s(e);\n}\nfunction f(e, t, r) {\n    return i.call(e, t, r);\n}\nfunction b(e, t, r) {\n    f(f(e, t, r), void 0, o);\n}\nfunction h(e, t) {\n    b(e, t);\n}\nfunction _(e, t) {\n    b(e, void 0, t);\n}\nfunction p(e, t, r) {\n    return f(e, t, r);\n}\nfunction m(e) {\n    f(e, void 0, o);\n}\nlet y = (e)=>{\n    if (\"function\" == typeof queueMicrotask) y = queueMicrotask;\n    else {\n        const e = c(void 0);\n        y = (t)=>f(e, t);\n    }\n    return y(e);\n};\nfunction g(e, t, r) {\n    if (\"function\" != typeof e) throw new TypeError(\"Argument is not a function\");\n    return Function.prototype.apply.call(e, t, r);\n}\nfunction w(e, t, r) {\n    try {\n        return c(g(e, t, r));\n    } catch (e) {\n        return d(e);\n    }\n}\nclass S {\n    constructor(){\n        this._cursor = 0, this._size = 0, this._front = {\n            _elements: [],\n            _next: void 0\n        }, this._back = this._front, this._cursor = 0, this._size = 0;\n    }\n    get length() {\n        return this._size;\n    }\n    push(e) {\n        const t = this._back;\n        let r = t;\n        16383 === t._elements.length && (r = {\n            _elements: [],\n            _next: void 0\n        }), t._elements.push(e), r !== t && (this._back = r, t._next = r), ++this._size;\n    }\n    shift() {\n        const e = this._front;\n        let t = e;\n        const r = this._cursor;\n        let o = r + 1;\n        const n = e._elements, a = n[r];\n        return 16384 === o && (t = e._next, o = 0), --this._size, this._cursor = o, e !== t && (this._front = t), n[r] = void 0, a;\n    }\n    forEach(e) {\n        let t = this._cursor, r = this._front, o = r._elements;\n        for(; !(t === o.length && void 0 === r._next || t === o.length && (r = r._next, o = r._elements, t = 0, 0 === o.length));)e(o[t]), ++t;\n    }\n    peek() {\n        const e = this._front, t = this._cursor;\n        return e._elements[t];\n    }\n}\nconst v = e(\"[[AbortSteps]]\"), R = e(\"[[ErrorSteps]]\"), T = e(\"[[CancelSteps]]\"), q = e(\"[[PullSteps]]\"), C = e(\"[[ReleaseSteps]]\");\nfunction E(e, t) {\n    e._ownerReadableStream = t, t._reader = e, \"readable\" === t._state ? O(e) : \"closed\" === t._state ? function(e) {\n        O(e), j(e);\n    }(e) : B(e, t._storedError);\n}\nfunction P(e, t) {\n    return Gt(e._ownerReadableStream, t);\n}\nfunction W(e) {\n    const t = e._ownerReadableStream;\n    \"readable\" === t._state ? A(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")) : function(e, t) {\n        B(e, t);\n    }(e, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")), t._readableStreamController[C](), t._reader = void 0, e._ownerReadableStream = void 0;\n}\nfunction k(e) {\n    return new TypeError(\"Cannot \" + e + \" a stream using a released reader\");\n}\nfunction O(e) {\n    e._closedPromise = u((t, r)=>{\n        e._closedPromise_resolve = t, e._closedPromise_reject = r;\n    });\n}\nfunction B(e, t) {\n    O(e), A(e, t);\n}\nfunction A(e, t) {\n    void 0 !== e._closedPromise_reject && (m(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n}\nfunction j(e) {\n    void 0 !== e._closedPromise_resolve && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);\n}\nconst z = Number.isFinite || function(e) {\n    return \"number\" == typeof e && isFinite(e);\n}, L = Math.trunc || function(e) {\n    return e < 0 ? Math.ceil(e) : Math.floor(e);\n};\nfunction F(e, t) {\n    if (void 0 !== e && \"object\" != typeof (r = e) && \"function\" != typeof r) throw new TypeError(`${t} is not an object.`);\n    var r;\n}\nfunction I(e, t) {\n    if (\"function\" != typeof e) throw new TypeError(`${t} is not a function.`);\n}\nfunction D(e, t) {\n    if (!function(e) {\n        return \"object\" == typeof e && null !== e || \"function\" == typeof e;\n    }(e)) throw new TypeError(`${t} is not an object.`);\n}\nfunction $(e, t, r) {\n    if (void 0 === e) throw new TypeError(`Parameter ${t} is required in '${r}'.`);\n}\nfunction M(e, t, r) {\n    if (void 0 === e) throw new TypeError(`${t} is required in '${r}'.`);\n}\nfunction Y(e) {\n    return Number(e);\n}\nfunction Q(e) {\n    return 0 === e ? 0 : e;\n}\nfunction N(e, t) {\n    const r = Number.MAX_SAFE_INTEGER;\n    let o = Number(e);\n    if (o = Q(o), !z(o)) throw new TypeError(`${t} is not a finite number`);\n    if (o = function(e) {\n        return Q(L(e));\n    }(o), o < 0 || o > r) throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);\n    return z(o) && 0 !== o ? o : 0;\n}\nfunction H(e) {\n    if (!r(e)) return !1;\n    if (\"function\" != typeof e.getReader) return !1;\n    try {\n        return \"boolean\" == typeof e.locked;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction x(e) {\n    if (!r(e)) return !1;\n    if (\"function\" != typeof e.getWriter) return !1;\n    try {\n        return \"boolean\" == typeof e.locked;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction V(e, t) {\n    if (!Vt(e)) throw new TypeError(`${t} is not a ReadableStream.`);\n}\nfunction U(e, t) {\n    e._reader._readRequests.push(t);\n}\nfunction G(e, t, r) {\n    const o = e._reader._readRequests.shift();\n    r ? o._closeSteps() : o._chunkSteps(t);\n}\nfunction X(e) {\n    return e._reader._readRequests.length;\n}\nfunction J(e) {\n    const t = e._reader;\n    return void 0 !== t && !!K(t);\n}\nclass ReadableStreamDefaultReader {\n    constructor(e){\n        if ($(e, 1, \"ReadableStreamDefaultReader\"), V(e, \"First parameter\"), Ut(e)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n        E(this, e), this._readRequests = new S;\n    }\n    get closed() {\n        return K(this) ? this._closedPromise : d(ee(\"closed\"));\n    }\n    cancel(e) {\n        return K(this) ? void 0 === this._ownerReadableStream ? d(k(\"cancel\")) : P(this, e) : d(ee(\"cancel\"));\n    }\n    read() {\n        if (!K(this)) return d(ee(\"read\"));\n        if (void 0 === this._ownerReadableStream) return d(k(\"read from\"));\n        let e, t;\n        const r = u((r, o)=>{\n            e = r, t = o;\n        });\n        return function(e, t) {\n            const r = e._ownerReadableStream;\n            r._disturbed = !0, \"closed\" === r._state ? t._closeSteps() : \"errored\" === r._state ? t._errorSteps(r._storedError) : r._readableStreamController[q](t);\n        }(this, {\n            _chunkSteps: (t)=>e({\n                    value: t,\n                    done: !1\n                }),\n            _closeSteps: ()=>e({\n                    value: void 0,\n                    done: !0\n                }),\n            _errorSteps: (e)=>t(e)\n        }), r;\n    }\n    releaseLock() {\n        if (!K(this)) throw ee(\"releaseLock\");\n        void 0 !== this._ownerReadableStream && function(e) {\n            W(e);\n            const t = new TypeError(\"Reader was released\");\n            Z(e, t);\n        }(this);\n    }\n}\nfunction K(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readRequests\") && e instanceof ReadableStreamDefaultReader;\n}\nfunction Z(e, t) {\n    const r = e._readRequests;\n    e._readRequests = new S, r.forEach((e)=>{\n        e._errorSteps(t);\n    });\n}\nfunction ee(e) {\n    return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`);\n}\nObject.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    read: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    }\n}), n(ReadableStreamDefaultReader.prototype.cancel, \"cancel\"), n(ReadableStreamDefaultReader.prototype.read, \"read\"), n(ReadableStreamDefaultReader.prototype.releaseLock, \"releaseLock\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultReader.prototype, e.toStringTag, {\n    value: \"ReadableStreamDefaultReader\",\n    configurable: !0\n});\nclass te {\n    constructor(e, t){\n        this._ongoingPromise = void 0, this._isFinished = !1, this._reader = e, this._preventCancel = t;\n    }\n    next() {\n        const e = ()=>this._nextSteps();\n        return this._ongoingPromise = this._ongoingPromise ? p(this._ongoingPromise, e, e) : e(), this._ongoingPromise;\n    }\n    return(e) {\n        const t = ()=>this._returnSteps(e);\n        return this._ongoingPromise ? p(this._ongoingPromise, t, t) : t();\n    }\n    _nextSteps() {\n        if (this._isFinished) return Promise.resolve({\n            value: void 0,\n            done: !0\n        });\n        const e = this._reader;\n        return void 0 === e ? d(k(\"iterate\")) : f(e.read(), (e)=>{\n            var t;\n            return this._ongoingPromise = void 0, e.done && (this._isFinished = !0, null === (t = this._reader) || void 0 === t || t.releaseLock(), this._reader = void 0), e;\n        }, (e)=>{\n            var t;\n            throw this._ongoingPromise = void 0, this._isFinished = !0, null === (t = this._reader) || void 0 === t || t.releaseLock(), this._reader = void 0, e;\n        });\n    }\n    _returnSteps(e) {\n        if (this._isFinished) return Promise.resolve({\n            value: e,\n            done: !0\n        });\n        this._isFinished = !0;\n        const t = this._reader;\n        if (void 0 === t) return d(k(\"finish iterating\"));\n        if (this._reader = void 0, !this._preventCancel) {\n            const r = t.cancel(e);\n            return t.releaseLock(), p(r, ()=>({\n                    value: e,\n                    done: !0\n                }));\n        }\n        return t.releaseLock(), c({\n            value: e,\n            done: !0\n        });\n    }\n}\nconst re = {\n    next () {\n        return oe(this) ? this._asyncIteratorImpl.next() : d(ne(\"next\"));\n    },\n    return (e) {\n        return oe(this) ? this._asyncIteratorImpl.return(e) : d(ne(\"return\"));\n    }\n};\nfunction oe(e) {\n    if (!r(e)) return !1;\n    if (!Object.prototype.hasOwnProperty.call(e, \"_asyncIteratorImpl\")) return !1;\n    try {\n        return e._asyncIteratorImpl instanceof te;\n    } catch (e) {\n        return !1;\n    }\n}\nfunction ne(e) {\n    return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`);\n}\n\"symbol\" == typeof e.asyncIterator && Object.defineProperty(re, e.asyncIterator, {\n    value () {\n        return this;\n    },\n    writable: !0,\n    configurable: !0\n});\nconst ae = Number.isNaN || function(e) {\n    return e != e;\n};\nfunction ie(e, t, r, o, n) {\n    new Uint8Array(e).set(new Uint8Array(r, o, n), t);\n}\nfunction le(e) {\n    const t = function(e, t, r) {\n        if (e.slice) return e.slice(t, r);\n        const o = r - t, n = new ArrayBuffer(o);\n        return ie(n, 0, e, t, o), n;\n    }(e.buffer, e.byteOffset, e.byteOffset + e.byteLength);\n    return new Uint8Array(t);\n}\nfunction se(e) {\n    const t = e._queue.shift();\n    return e._queueTotalSize -= t.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), t.value;\n}\nfunction ue(e, t, r) {\n    if (\"number\" != typeof (o = r) || ae(o) || o < 0 || r === 1 / 0) throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n    var o;\n    e._queue.push({\n        value: t,\n        size: r\n    }), e._queueTotalSize += r;\n}\nfunction ce(e) {\n    e._queue = new S, e._queueTotalSize = 0;\n}\nclass ReadableStreamBYOBRequest {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get view() {\n        if (!fe(this)) throw Be(\"view\");\n        return this._view;\n    }\n    respond(e) {\n        if (!fe(this)) throw Be(\"respond\");\n        if ($(e, 1, \"respond\"), e = N(e, \"First parameter\"), void 0 === this._associatedReadableByteStreamController) throw new TypeError(\"This BYOB request has been invalidated\");\n        this._view.buffer, function(e, t) {\n            const r = e._pendingPullIntos.peek();\n            if (\"closed\" === e._controlledReadableByteStream._state) {\n                if (0 !== t) throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n            } else {\n                if (0 === t) throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n                if (r.bytesFilled + t > r.byteLength) throw new RangeError(\"bytesWritten out of range\");\n            }\n            r.buffer = r.buffer, qe(e, t);\n        }(this._associatedReadableByteStreamController, e);\n    }\n    respondWithNewView(e) {\n        if (!fe(this)) throw Be(\"respondWithNewView\");\n        if ($(e, 1, \"respondWithNewView\"), !ArrayBuffer.isView(e)) throw new TypeError(\"You can only respond with array buffer views\");\n        if (void 0 === this._associatedReadableByteStreamController) throw new TypeError(\"This BYOB request has been invalidated\");\n        e.buffer, function(e, t) {\n            const r = e._pendingPullIntos.peek();\n            if (\"closed\" === e._controlledReadableByteStream._state) {\n                if (0 !== t.byteLength) throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n            } else if (0 === t.byteLength) throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n            if (r.byteOffset + r.bytesFilled !== t.byteOffset) throw new RangeError(\"The region specified by view does not match byobRequest\");\n            if (r.bufferByteLength !== t.buffer.byteLength) throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n            if (r.bytesFilled + t.byteLength > r.byteLength) throw new RangeError(\"The region specified by view is larger than byobRequest\");\n            const o = t.byteLength;\n            r.buffer = t.buffer, qe(e, o);\n        }(this._associatedReadableByteStreamController, e);\n    }\n}\nObject.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n        enumerable: !0\n    },\n    respondWithNewView: {\n        enumerable: !0\n    },\n    view: {\n        enumerable: !0\n    }\n}), n(ReadableStreamBYOBRequest.prototype.respond, \"respond\"), n(ReadableStreamBYOBRequest.prototype.respondWithNewView, \"respondWithNewView\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBRequest.prototype, e.toStringTag, {\n    value: \"ReadableStreamBYOBRequest\",\n    configurable: !0\n});\nclass ReadableByteStreamController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get byobRequest() {\n        if (!de(this)) throw Ae(\"byobRequest\");\n        return function(e) {\n            if (null === e._byobRequest && e._pendingPullIntos.length > 0) {\n                const t = e._pendingPullIntos.peek(), r = new Uint8Array(t.buffer, t.byteOffset + t.bytesFilled, t.byteLength - t.bytesFilled), o = Object.create(ReadableStreamBYOBRequest.prototype);\n                !function(e, t, r) {\n                    e._associatedReadableByteStreamController = t, e._view = r;\n                }(o, e, r), e._byobRequest = o;\n            }\n            return e._byobRequest;\n        }(this);\n    }\n    get desiredSize() {\n        if (!de(this)) throw Ae(\"desiredSize\");\n        return ke(this);\n    }\n    close() {\n        if (!de(this)) throw Ae(\"close\");\n        if (this._closeRequested) throw new TypeError(\"The stream has already been closed; do not close it again!\");\n        const e = this._controlledReadableByteStream._state;\n        if (\"readable\" !== e) throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);\n        !function(e) {\n            const t = e._controlledReadableByteStream;\n            if (e._closeRequested || \"readable\" !== t._state) return;\n            if (e._queueTotalSize > 0) return void (e._closeRequested = !0);\n            if (e._pendingPullIntos.length > 0) {\n                if (e._pendingPullIntos.peek().bytesFilled > 0) {\n                    const t = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                    throw Pe(e, t), t;\n                }\n            }\n            Ee(e), Xt(t);\n        }(this);\n    }\n    enqueue(e) {\n        if (!de(this)) throw Ae(\"enqueue\");\n        if ($(e, 1, \"enqueue\"), !ArrayBuffer.isView(e)) throw new TypeError(\"chunk must be an array buffer view\");\n        if (0 === e.byteLength) throw new TypeError(\"chunk must have non-zero byteLength\");\n        if (0 === e.buffer.byteLength) throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n        if (this._closeRequested) throw new TypeError(\"stream is closed or draining\");\n        const t = this._controlledReadableByteStream._state;\n        if (\"readable\" !== t) throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);\n        !function(e, t) {\n            const r = e._controlledReadableByteStream;\n            if (e._closeRequested || \"readable\" !== r._state) return;\n            const o = t.buffer, n = t.byteOffset, a = t.byteLength, i = o;\n            if (e._pendingPullIntos.length > 0) {\n                const t = e._pendingPullIntos.peek();\n                t.buffer, Re(e), t.buffer = t.buffer, \"none\" === t.readerType && ge(e, t);\n            }\n            if (J(r)) if (function(e) {\n                const t = e._controlledReadableByteStream._reader;\n                for(; t._readRequests.length > 0;){\n                    if (0 === e._queueTotalSize) return;\n                    We(e, t._readRequests.shift());\n                }\n            }(e), 0 === X(r)) me(e, i, n, a);\n            else {\n                e._pendingPullIntos.length > 0 && Ce(e);\n                G(r, new Uint8Array(i, n, a), !1);\n            }\n            else Le(r) ? (me(e, i, n, a), Te(e)) : me(e, i, n, a);\n            be(e);\n        }(this, e);\n    }\n    error(e) {\n        if (!de(this)) throw Ae(\"error\");\n        Pe(this, e);\n    }\n    [T](e) {\n        he(this), ce(this);\n        const t = this._cancelAlgorithm(e);\n        return Ee(this), t;\n    }\n    [q](e) {\n        const t = this._controlledReadableByteStream;\n        if (this._queueTotalSize > 0) return void We(this, e);\n        const r = this._autoAllocateChunkSize;\n        if (void 0 !== r) {\n            let t;\n            try {\n                t = new ArrayBuffer(r);\n            } catch (t) {\n                return void e._errorSteps(t);\n            }\n            const o = {\n                buffer: t,\n                bufferByteLength: r,\n                byteOffset: 0,\n                byteLength: r,\n                bytesFilled: 0,\n                elementSize: 1,\n                viewConstructor: Uint8Array,\n                readerType: \"default\"\n            };\n            this._pendingPullIntos.push(o);\n        }\n        U(t, e), be(this);\n    }\n    [C]() {\n        if (this._pendingPullIntos.length > 0) {\n            const e = this._pendingPullIntos.peek();\n            e.readerType = \"none\", this._pendingPullIntos = new S, this._pendingPullIntos.push(e);\n        }\n    }\n}\nfunction de(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledReadableByteStream\") && e instanceof ReadableByteStreamController;\n}\nfunction fe(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_associatedReadableByteStreamController\") && e instanceof ReadableStreamBYOBRequest;\n}\nfunction be(e) {\n    const t = function(e) {\n        const t = e._controlledReadableByteStream;\n        if (\"readable\" !== t._state) return !1;\n        if (e._closeRequested) return !1;\n        if (!e._started) return !1;\n        if (J(t) && X(t) > 0) return !0;\n        if (Le(t) && ze(t) > 0) return !0;\n        if (ke(e) > 0) return !0;\n        return !1;\n    }(e);\n    if (!t) return;\n    if (e._pulling) return void (e._pullAgain = !0);\n    e._pulling = !0;\n    b(e._pullAlgorithm(), ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, be(e)), null), (t)=>(Pe(e, t), null));\n}\nfunction he(e) {\n    Re(e), e._pendingPullIntos = new S;\n}\nfunction _e(e, t) {\n    let r = !1;\n    \"closed\" === e._state && (r = !0);\n    const o = pe(t);\n    \"default\" === t.readerType ? G(e, o, r) : function(e, t, r) {\n        const o = e._reader._readIntoRequests.shift();\n        r ? o._closeSteps(t) : o._chunkSteps(t);\n    }(e, o, r);\n}\nfunction pe(e) {\n    const t = e.bytesFilled, r = e.elementSize;\n    return new e.viewConstructor(e.buffer, e.byteOffset, t / r);\n}\nfunction me(e, t, r, o) {\n    e._queue.push({\n        buffer: t,\n        byteOffset: r,\n        byteLength: o\n    }), e._queueTotalSize += o;\n}\nfunction ye(e, t, r, o) {\n    let n;\n    try {\n        n = t.slice(r, r + o);\n    } catch (t) {\n        throw Pe(e, t), t;\n    }\n    me(e, n, 0, o);\n}\nfunction ge(e, t) {\n    t.bytesFilled > 0 && ye(e, t.buffer, t.byteOffset, t.bytesFilled), Ce(e);\n}\nfunction we(e, t) {\n    const r = t.elementSize, o = t.bytesFilled - t.bytesFilled % r, n = Math.min(e._queueTotalSize, t.byteLength - t.bytesFilled), a = t.bytesFilled + n, i = a - a % r;\n    let l = n, s = !1;\n    i > o && (l = i - t.bytesFilled, s = !0);\n    const u = e._queue;\n    for(; l > 0;){\n        const r = u.peek(), o = Math.min(l, r.byteLength), n = t.byteOffset + t.bytesFilled;\n        ie(t.buffer, n, r.buffer, r.byteOffset, o), r.byteLength === o ? u.shift() : (r.byteOffset += o, r.byteLength -= o), e._queueTotalSize -= o, Se(e, o, t), l -= o;\n    }\n    return s;\n}\nfunction Se(e, t, r) {\n    r.bytesFilled += t;\n}\nfunction ve(e) {\n    0 === e._queueTotalSize && e._closeRequested ? (Ee(e), Xt(e._controlledReadableByteStream)) : be(e);\n}\nfunction Re(e) {\n    null !== e._byobRequest && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = null, e._byobRequest = null);\n}\nfunction Te(e) {\n    for(; e._pendingPullIntos.length > 0;){\n        if (0 === e._queueTotalSize) return;\n        const t = e._pendingPullIntos.peek();\n        we(e, t) && (Ce(e), _e(e._controlledReadableByteStream, t));\n    }\n}\nfunction qe(e, t) {\n    const r = e._pendingPullIntos.peek();\n    Re(e);\n    \"closed\" === e._controlledReadableByteStream._state ? function(e, t) {\n        \"none\" === t.readerType && Ce(e);\n        const r = e._controlledReadableByteStream;\n        if (Le(r)) for(; ze(r) > 0;)_e(r, Ce(e));\n    }(e, r) : function(e, t, r) {\n        if (Se(0, t, r), \"none\" === r.readerType) return ge(e, r), void Te(e);\n        if (r.bytesFilled < r.elementSize) return;\n        Ce(e);\n        const o = r.bytesFilled % r.elementSize;\n        if (o > 0) {\n            const t = r.byteOffset + r.bytesFilled;\n            ye(e, r.buffer, t - o, o);\n        }\n        r.bytesFilled -= o, _e(e._controlledReadableByteStream, r), Te(e);\n    }(e, t, r), be(e);\n}\nfunction Ce(e) {\n    return e._pendingPullIntos.shift();\n}\nfunction Ee(e) {\n    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0;\n}\nfunction Pe(e, t) {\n    const r = e._controlledReadableByteStream;\n    \"readable\" === r._state && (he(e), ce(e), Ee(e), Jt(r, t));\n}\nfunction We(e, t) {\n    const r = e._queue.shift();\n    e._queueTotalSize -= r.byteLength, ve(e);\n    const o = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    t._chunkSteps(o);\n}\nfunction ke(e) {\n    const t = e._controlledReadableByteStream._state;\n    return \"errored\" === t ? null : \"closed\" === t ? 0 : e._strategyHWM - e._queueTotalSize;\n}\nfunction Oe(e, t, r) {\n    const o = Object.create(ReadableByteStreamController.prototype);\n    let n, a, i;\n    n = void 0 !== t.start ? ()=>t.start(o) : ()=>{}, a = void 0 !== t.pull ? ()=>t.pull(o) : ()=>c(void 0), i = void 0 !== t.cancel ? (e)=>t.cancel(e) : ()=>c(void 0);\n    const l = t.autoAllocateChunkSize;\n    if (0 === l) throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n    !function(e, t, r, o, n, a, i) {\n        t._controlledReadableByteStream = e, t._pullAgain = !1, t._pulling = !1, t._byobRequest = null, t._queue = t._queueTotalSize = void 0, ce(t), t._closeRequested = !1, t._started = !1, t._strategyHWM = a, t._pullAlgorithm = o, t._cancelAlgorithm = n, t._autoAllocateChunkSize = i, t._pendingPullIntos = new S, e._readableStreamController = t, b(c(r()), ()=>(t._started = !0, be(t), null), (e)=>(Pe(t, e), null));\n    }(e, o, n, a, i, r, l);\n}\nfunction Be(e) {\n    return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`);\n}\nfunction Ae(e) {\n    return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`);\n}\nfunction je(e, t) {\n    e._reader._readIntoRequests.push(t);\n}\nfunction ze(e) {\n    return e._reader._readIntoRequests.length;\n}\nfunction Le(e) {\n    const t = e._reader;\n    return void 0 !== t && !!Fe(t);\n}\nObject.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n        enumerable: !0\n    },\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    byobRequest: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(ReadableByteStreamController.prototype.close, \"close\"), n(ReadableByteStreamController.prototype.enqueue, \"enqueue\"), n(ReadableByteStreamController.prototype.error, \"error\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableByteStreamController.prototype, e.toStringTag, {\n    value: \"ReadableByteStreamController\",\n    configurable: !0\n});\nclass ReadableStreamBYOBReader {\n    constructor(e){\n        if ($(e, 1, \"ReadableStreamBYOBReader\"), V(e, \"First parameter\"), Ut(e)) throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n        if (!de(e._readableStreamController)) throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");\n        E(this, e), this._readIntoRequests = new S;\n    }\n    get closed() {\n        return Fe(this) ? this._closedPromise : d(De(\"closed\"));\n    }\n    cancel(e) {\n        return Fe(this) ? void 0 === this._ownerReadableStream ? d(k(\"cancel\")) : P(this, e) : d(De(\"cancel\"));\n    }\n    read(e) {\n        if (!Fe(this)) return d(De(\"read\"));\n        if (!ArrayBuffer.isView(e)) return d(new TypeError(\"view must be an array buffer view\"));\n        if (0 === e.byteLength) return d(new TypeError(\"view must have non-zero byteLength\"));\n        if (0 === e.buffer.byteLength) return d(new TypeError(\"view's buffer must have non-zero byteLength\"));\n        if (e.buffer, void 0 === this._ownerReadableStream) return d(k(\"read from\"));\n        let t, r;\n        const o = u((e, o)=>{\n            t = e, r = o;\n        });\n        return function(e, t, r) {\n            const o = e._ownerReadableStream;\n            o._disturbed = !0, \"errored\" === o._state ? r._errorSteps(o._storedError) : function(e, t, r) {\n                const o = e._controlledReadableByteStream;\n                let n = 1;\n                t.constructor !== DataView && (n = t.constructor.BYTES_PER_ELEMENT);\n                const a = t.constructor, i = t.buffer, l = {\n                    buffer: i,\n                    bufferByteLength: i.byteLength,\n                    byteOffset: t.byteOffset,\n                    byteLength: t.byteLength,\n                    bytesFilled: 0,\n                    elementSize: n,\n                    viewConstructor: a,\n                    readerType: \"byob\"\n                };\n                if (e._pendingPullIntos.length > 0) return e._pendingPullIntos.push(l), void je(o, r);\n                if (\"closed\" !== o._state) {\n                    if (e._queueTotalSize > 0) {\n                        if (we(e, l)) {\n                            const t = pe(l);\n                            return ve(e), void r._chunkSteps(t);\n                        }\n                        if (e._closeRequested) {\n                            const t = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                            return Pe(e, t), void r._errorSteps(t);\n                        }\n                    }\n                    e._pendingPullIntos.push(l), je(o, r), be(e);\n                } else {\n                    const e = new a(l.buffer, l.byteOffset, 0);\n                    r._closeSteps(e);\n                }\n            }(o._readableStreamController, t, r);\n        }(this, e, {\n            _chunkSteps: (e)=>t({\n                    value: e,\n                    done: !1\n                }),\n            _closeSteps: (e)=>t({\n                    value: e,\n                    done: !0\n                }),\n            _errorSteps: (e)=>r(e)\n        }), o;\n    }\n    releaseLock() {\n        if (!Fe(this)) throw De(\"releaseLock\");\n        void 0 !== this._ownerReadableStream && function(e) {\n            W(e);\n            const t = new TypeError(\"Reader was released\");\n            Ie(e, t);\n        }(this);\n    }\n}\nfunction Fe(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readIntoRequests\") && e instanceof ReadableStreamBYOBReader;\n}\nfunction Ie(e, t) {\n    const r = e._readIntoRequests;\n    e._readIntoRequests = new S, r.forEach((e)=>{\n        e._errorSteps(t);\n    });\n}\nfunction De(e) {\n    return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`);\n}\nfunction $e(e, t) {\n    const { highWaterMark: r } = e;\n    if (void 0 === r) return t;\n    if (ae(r) || r < 0) throw new RangeError(\"Invalid highWaterMark\");\n    return r;\n}\nfunction Me(e) {\n    const { size: t } = e;\n    return t || (()=>1);\n}\nfunction Ye(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.highWaterMark, o = null == e ? void 0 : e.size;\n    return {\n        highWaterMark: void 0 === r ? void 0 : Y(r),\n        size: void 0 === o ? void 0 : Qe(o, `${t} has member 'size' that`)\n    };\n}\nfunction Qe(e, t) {\n    return I(e, t), (t)=>Y(e(t));\n}\nfunction Ne(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction He(e, t, r) {\n    return I(e, r), ()=>w(e, t, []);\n}\nfunction xe(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction Ve(e, t, r) {\n    return I(e, r), (r, o)=>w(e, t, [\n            r,\n            o\n        ]);\n}\nObject.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    read: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    }\n}), n(ReadableStreamBYOBReader.prototype.cancel, \"cancel\"), n(ReadableStreamBYOBReader.prototype.read, \"read\"), n(ReadableStreamBYOBReader.prototype.releaseLock, \"releaseLock\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamBYOBReader.prototype, e.toStringTag, {\n    value: \"ReadableStreamBYOBReader\",\n    configurable: !0\n});\nconst Ue = \"function\" == typeof AbortController;\nclass WritableStream {\n    constructor(e = {}, t = {}){\n        void 0 === e ? e = null : D(e, \"First parameter\");\n        const r = Ye(t, \"Second parameter\"), o = function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.abort, o = null == e ? void 0 : e.close, n = null == e ? void 0 : e.start, a = null == e ? void 0 : e.type, i = null == e ? void 0 : e.write;\n            return {\n                abort: void 0 === r ? void 0 : Ne(r, e, `${t} has member 'abort' that`),\n                close: void 0 === o ? void 0 : He(o, e, `${t} has member 'close' that`),\n                start: void 0 === n ? void 0 : xe(n, e, `${t} has member 'start' that`),\n                write: void 0 === i ? void 0 : Ve(i, e, `${t} has member 'write' that`),\n                type: a\n            };\n        }(e, \"First parameter\");\n        var n;\n        (n = this)._state = \"writable\", n._storedError = void 0, n._writer = void 0, n._writableStreamController = void 0, n._writeRequests = new S, n._inFlightWriteRequest = void 0, n._closeRequest = void 0, n._inFlightCloseRequest = void 0, n._pendingAbortRequest = void 0, n._backpressure = !1;\n        if (void 0 !== o.type) throw new RangeError(\"Invalid type is specified\");\n        const a = Me(r);\n        !function(e, t, r, o) {\n            const n = Object.create(WritableStreamDefaultController.prototype);\n            let a, i, l, s;\n            a = void 0 !== t.start ? ()=>t.start(n) : ()=>{};\n            i = void 0 !== t.write ? (e)=>t.write(e, n) : ()=>c(void 0);\n            l = void 0 !== t.close ? ()=>t.close() : ()=>c(void 0);\n            s = void 0 !== t.abort ? (e)=>t.abort(e) : ()=>c(void 0);\n            !function(e, t, r, o, n, a, i, l) {\n                t._controlledWritableStream = e, e._writableStreamController = t, t._queue = void 0, t._queueTotalSize = void 0, ce(t), t._abortReason = void 0, t._abortController = function() {\n                    if (Ue) return new AbortController;\n                }(), t._started = !1, t._strategySizeAlgorithm = l, t._strategyHWM = i, t._writeAlgorithm = o, t._closeAlgorithm = n, t._abortAlgorithm = a;\n                const s = bt(t);\n                nt(e, s);\n                const u = r();\n                b(c(u), ()=>(t._started = !0, dt(t), null), (r)=>(t._started = !0, Ze(e, r), null));\n            }(e, n, a, i, l, s, r, o);\n        }(this, o, $e(r, 1), a);\n    }\n    get locked() {\n        if (!Ge(this)) throw _t(\"locked\");\n        return Xe(this);\n    }\n    abort(e) {\n        return Ge(this) ? Xe(this) ? d(new TypeError(\"Cannot abort a stream that already has a writer\")) : Je(this, e) : d(_t(\"abort\"));\n    }\n    close() {\n        return Ge(this) ? Xe(this) ? d(new TypeError(\"Cannot close a stream that already has a writer\")) : rt(this) ? d(new TypeError(\"Cannot close an already-closing stream\")) : Ke(this) : d(_t(\"close\"));\n    }\n    getWriter() {\n        if (!Ge(this)) throw _t(\"getWriter\");\n        return new WritableStreamDefaultWriter(this);\n    }\n}\nfunction Ge(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_writableStreamController\") && e instanceof WritableStream;\n}\nfunction Xe(e) {\n    return void 0 !== e._writer;\n}\nfunction Je(e, t) {\n    var r;\n    if (\"closed\" === e._state || \"errored\" === e._state) return c(void 0);\n    e._writableStreamController._abortReason = t, null === (r = e._writableStreamController._abortController) || void 0 === r || r.abort(t);\n    const o = e._state;\n    if (\"closed\" === o || \"errored\" === o) return c(void 0);\n    if (void 0 !== e._pendingAbortRequest) return e._pendingAbortRequest._promise;\n    let n = !1;\n    \"erroring\" === o && (n = !0, t = void 0);\n    const a = u((r, o)=>{\n        e._pendingAbortRequest = {\n            _promise: void 0,\n            _resolve: r,\n            _reject: o,\n            _reason: t,\n            _wasAlreadyErroring: n\n        };\n    });\n    return e._pendingAbortRequest._promise = a, n || et(e, t), a;\n}\nfunction Ke(e) {\n    const t = e._state;\n    if (\"closed\" === t || \"errored\" === t) return d(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));\n    const r = u((t, r)=>{\n        const o = {\n            _resolve: t,\n            _reject: r\n        };\n        e._closeRequest = o;\n    }), o = e._writer;\n    var n;\n    return void 0 !== o && e._backpressure && \"writable\" === t && Et(o), ue(n = e._writableStreamController, lt, 0), dt(n), r;\n}\nfunction Ze(e, t) {\n    \"writable\" !== e._state ? tt(e) : et(e, t);\n}\nfunction et(e, t) {\n    const r = e._writableStreamController;\n    e._state = \"erroring\", e._storedError = t;\n    const o = e._writer;\n    void 0 !== o && it(o, t), !function(e) {\n        if (void 0 === e._inFlightWriteRequest && void 0 === e._inFlightCloseRequest) return !1;\n        return !0;\n    }(e) && r._started && tt(e);\n}\nfunction tt(e) {\n    e._state = \"errored\", e._writableStreamController[R]();\n    const t = e._storedError;\n    if (e._writeRequests.forEach((e)=>{\n        e._reject(t);\n    }), e._writeRequests = new S, void 0 === e._pendingAbortRequest) return void ot(e);\n    const r = e._pendingAbortRequest;\n    if (e._pendingAbortRequest = void 0, r._wasAlreadyErroring) return r._reject(t), void ot(e);\n    b(e._writableStreamController[v](r._reason), ()=>(r._resolve(), ot(e), null), (t)=>(r._reject(t), ot(e), null));\n}\nfunction rt(e) {\n    return void 0 !== e._closeRequest || void 0 !== e._inFlightCloseRequest;\n}\nfunction ot(e) {\n    void 0 !== e._closeRequest && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);\n    const t = e._writer;\n    void 0 !== t && St(t, e._storedError);\n}\nfunction nt(e, t) {\n    const r = e._writer;\n    void 0 !== r && t !== e._backpressure && (t ? function(e) {\n        Rt(e);\n    }(r) : Et(r)), e._backpressure = t;\n}\nObject.defineProperties(WritableStream.prototype, {\n    abort: {\n        enumerable: !0\n    },\n    close: {\n        enumerable: !0\n    },\n    getWriter: {\n        enumerable: !0\n    },\n    locked: {\n        enumerable: !0\n    }\n}), n(WritableStream.prototype.abort, \"abort\"), n(WritableStream.prototype.close, \"close\"), n(WritableStream.prototype.getWriter, \"getWriter\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStream.prototype, e.toStringTag, {\n    value: \"WritableStream\",\n    configurable: !0\n});\nclass WritableStreamDefaultWriter {\n    constructor(e){\n        if ($(e, 1, \"WritableStreamDefaultWriter\"), function(e, t) {\n            if (!Ge(e)) throw new TypeError(`${t} is not a WritableStream.`);\n        }(e, \"First parameter\"), Xe(e)) throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n        this._ownerWritableStream = e, e._writer = this;\n        const t = e._state;\n        if (\"writable\" === t) !rt(e) && e._backpressure ? Rt(this) : qt(this), gt(this);\n        else if (\"erroring\" === t) Tt(this, e._storedError), gt(this);\n        else if (\"closed\" === t) qt(this), gt(r = this), vt(r);\n        else {\n            const t = e._storedError;\n            Tt(this, t), wt(this, t);\n        }\n        var r;\n    }\n    get closed() {\n        return at(this) ? this._closedPromise : d(mt(\"closed\"));\n    }\n    get desiredSize() {\n        if (!at(this)) throw mt(\"desiredSize\");\n        if (void 0 === this._ownerWritableStream) throw yt(\"desiredSize\");\n        return function(e) {\n            const t = e._ownerWritableStream, r = t._state;\n            if (\"errored\" === r || \"erroring\" === r) return null;\n            if (\"closed\" === r) return 0;\n            return ct(t._writableStreamController);\n        }(this);\n    }\n    get ready() {\n        return at(this) ? this._readyPromise : d(mt(\"ready\"));\n    }\n    abort(e) {\n        return at(this) ? void 0 === this._ownerWritableStream ? d(yt(\"abort\")) : function(e, t) {\n            return Je(e._ownerWritableStream, t);\n        }(this, e) : d(mt(\"abort\"));\n    }\n    close() {\n        if (!at(this)) return d(mt(\"close\"));\n        const e = this._ownerWritableStream;\n        return void 0 === e ? d(yt(\"close\")) : rt(e) ? d(new TypeError(\"Cannot close an already-closing stream\")) : Ke(this._ownerWritableStream);\n    }\n    releaseLock() {\n        if (!at(this)) throw mt(\"releaseLock\");\n        void 0 !== this._ownerWritableStream && function(e) {\n            const t = e._ownerWritableStream, r = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n            it(e, r), function(e, t) {\n                \"pending\" === e._closedPromiseState ? St(e, t) : function(e, t) {\n                    wt(e, t);\n                }(e, t);\n            }(e, r), t._writer = void 0, e._ownerWritableStream = void 0;\n        }(this);\n    }\n    write(e) {\n        return at(this) ? void 0 === this._ownerWritableStream ? d(yt(\"write to\")) : function(e, t) {\n            const r = e._ownerWritableStream, o = r._writableStreamController, n = function(e, t) {\n                try {\n                    return e._strategySizeAlgorithm(t);\n                } catch (t) {\n                    return ft(e, t), 1;\n                }\n            }(o, t);\n            if (r !== e._ownerWritableStream) return d(yt(\"write to\"));\n            const a = r._state;\n            if (\"errored\" === a) return d(r._storedError);\n            if (rt(r) || \"closed\" === a) return d(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n            if (\"erroring\" === a) return d(r._storedError);\n            const i = function(e) {\n                return u((t, r)=>{\n                    const o = {\n                        _resolve: t,\n                        _reject: r\n                    };\n                    e._writeRequests.push(o);\n                });\n            }(r);\n            return function(e, t, r) {\n                try {\n                    ue(e, t, r);\n                } catch (t) {\n                    return void ft(e, t);\n                }\n                const o = e._controlledWritableStream;\n                if (!rt(o) && \"writable\" === o._state) {\n                    nt(o, bt(e));\n                }\n                dt(e);\n            }(o, t, n), i;\n        }(this, e) : d(mt(\"write\"));\n    }\n}\nfunction at(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_ownerWritableStream\") && e instanceof WritableStreamDefaultWriter;\n}\nfunction it(e, t) {\n    \"pending\" === e._readyPromiseState ? Ct(e, t) : function(e, t) {\n        Tt(e, t);\n    }(e, t);\n}\nObject.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n        enumerable: !0\n    },\n    close: {\n        enumerable: !0\n    },\n    releaseLock: {\n        enumerable: !0\n    },\n    write: {\n        enumerable: !0\n    },\n    closed: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    },\n    ready: {\n        enumerable: !0\n    }\n}), n(WritableStreamDefaultWriter.prototype.abort, \"abort\"), n(WritableStreamDefaultWriter.prototype.close, \"close\"), n(WritableStreamDefaultWriter.prototype.releaseLock, \"releaseLock\"), n(WritableStreamDefaultWriter.prototype.write, \"write\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultWriter.prototype, e.toStringTag, {\n    value: \"WritableStreamDefaultWriter\",\n    configurable: !0\n});\nconst lt = {};\nclass WritableStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get abortReason() {\n        if (!st(this)) throw pt(\"abortReason\");\n        return this._abortReason;\n    }\n    get signal() {\n        if (!st(this)) throw pt(\"signal\");\n        if (void 0 === this._abortController) throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n        return this._abortController.signal;\n    }\n    error(e) {\n        if (!st(this)) throw pt(\"error\");\n        \"writable\" === this._controlledWritableStream._state && ht(this, e);\n    }\n    [v](e) {\n        const t = this._abortAlgorithm(e);\n        return ut(this), t;\n    }\n    [R]() {\n        ce(this);\n    }\n}\nfunction st(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledWritableStream\") && e instanceof WritableStreamDefaultController;\n}\nfunction ut(e) {\n    e._writeAlgorithm = void 0, e._closeAlgorithm = void 0, e._abortAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n}\nfunction ct(e) {\n    return e._strategyHWM - e._queueTotalSize;\n}\nfunction dt(e) {\n    const t = e._controlledWritableStream;\n    if (!e._started) return;\n    if (void 0 !== t._inFlightWriteRequest) return;\n    if (\"erroring\" === t._state) return void tt(t);\n    if (0 === e._queue.length) return;\n    const r = e._queue.peek().value;\n    r === lt ? function(e) {\n        const t = e._controlledWritableStream;\n        (function(e) {\n            e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;\n        })(t), se(e);\n        const r = e._closeAlgorithm();\n        ut(e), b(r, ()=>((function(e) {\n                e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, \"erroring\" === e._state && (e._storedError = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = \"closed\";\n                const t = e._writer;\n                void 0 !== t && vt(t);\n            })(t), null), (e)=>((function(e, t) {\n                e._inFlightCloseRequest._reject(t), e._inFlightCloseRequest = void 0, void 0 !== e._pendingAbortRequest && (e._pendingAbortRequest._reject(t), e._pendingAbortRequest = void 0), Ze(e, t);\n            })(t, e), null));\n    }(e) : function(e, t) {\n        const r = e._controlledWritableStream;\n        !function(e) {\n            e._inFlightWriteRequest = e._writeRequests.shift();\n        }(r);\n        b(e._writeAlgorithm(t), ()=>{\n            !function(e) {\n                e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;\n            }(r);\n            const t = r._state;\n            if (se(e), !rt(r) && \"writable\" === t) {\n                const t = bt(e);\n                nt(r, t);\n            }\n            return dt(e), null;\n        }, (t)=>(\"writable\" === r._state && ut(e), function(e, t) {\n                e._inFlightWriteRequest._reject(t), e._inFlightWriteRequest = void 0, Ze(e, t);\n            }(r, t), null));\n    }(e, r);\n}\nfunction ft(e, t) {\n    \"writable\" === e._controlledWritableStream._state && ht(e, t);\n}\nfunction bt(e) {\n    return ct(e) <= 0;\n}\nfunction ht(e, t) {\n    const r = e._controlledWritableStream;\n    ut(e), et(r, t);\n}\nfunction _t(e) {\n    return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`);\n}\nfunction pt(e) {\n    return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`);\n}\nfunction mt(e) {\n    return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`);\n}\nfunction yt(e) {\n    return new TypeError(\"Cannot \" + e + \" a stream using a released writer\");\n}\nfunction gt(e) {\n    e._closedPromise = u((t, r)=>{\n        e._closedPromise_resolve = t, e._closedPromise_reject = r, e._closedPromiseState = \"pending\";\n    });\n}\nfunction wt(e, t) {\n    gt(e), St(e, t);\n}\nfunction St(e, t) {\n    void 0 !== e._closedPromise_reject && (m(e._closedPromise), e._closedPromise_reject(t), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"rejected\");\n}\nfunction vt(e) {\n    void 0 !== e._closedPromise_resolve && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = \"resolved\");\n}\nfunction Rt(e) {\n    e._readyPromise = u((t, r)=>{\n        e._readyPromise_resolve = t, e._readyPromise_reject = r;\n    }), e._readyPromiseState = \"pending\";\n}\nfunction Tt(e, t) {\n    Rt(e), Ct(e, t);\n}\nfunction qt(e) {\n    Rt(e), Et(e);\n}\nfunction Ct(e, t) {\n    void 0 !== e._readyPromise_reject && (m(e._readyPromise), e._readyPromise_reject(t), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"rejected\");\n}\nfunction Et(e) {\n    void 0 !== e._readyPromise_resolve && (e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = \"fulfilled\");\n}\nObject.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n        enumerable: !0\n    },\n    signal: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(WritableStreamDefaultController.prototype, e.toStringTag, {\n    value: \"WritableStreamDefaultController\",\n    configurable: !0\n});\nconst Pt = \"undefined\" != typeof DOMException ? DOMException : void 0;\nconst Wt = function(e) {\n    if (\"function\" != typeof e && \"object\" != typeof e) return !1;\n    try {\n        return new e, !0;\n    } catch (e) {\n        return !1;\n    }\n}(Pt) ? Pt : function() {\n    const e = function(e, t) {\n        this.message = e || \"\", this.name = t || \"Error\", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);\n    };\n    return e.prototype = Object.create(Error.prototype), Object.defineProperty(e.prototype, \"constructor\", {\n        value: e,\n        writable: !0,\n        configurable: !0\n    }), e;\n}();\nfunction kt(e, t, r, o, n, a) {\n    const i = e.getReader(), l = t.getWriter();\n    Vt(e) && (e._disturbed = !0);\n    let s, _, g, w = !1, S = !1, v = \"readable\", R = \"writable\", T = !1, q = !1;\n    const C = u((e)=>{\n        g = e;\n    });\n    let E = Promise.resolve(void 0);\n    return u((P, W)=>{\n        let k;\n        function O() {\n            if (w) return;\n            const e = u((e, t)=>{\n                !function r(o) {\n                    o ? e() : f(function() {\n                        if (w) return c(!0);\n                        return f(l.ready, ()=>f(i.read(), (e)=>!!e.done || (E = l.write(e.value), m(E), !1)));\n                    }(), r, t);\n                }(!1);\n            });\n            m(e);\n        }\n        function B() {\n            return v = \"closed\", r ? L() : z(()=>(Ge(t) && (T = rt(t), R = t._state), T || \"closed\" === R ? c(void 0) : \"erroring\" === R || \"errored\" === R ? d(_) : (T = !0, l.close())), !1, void 0), null;\n        }\n        function A(e) {\n            return w || (v = \"errored\", s = e, o ? L(!0, e) : z(()=>l.abort(e), !0, e)), null;\n        }\n        function j(e) {\n            return S || (R = \"errored\", _ = e, n ? L(!0, e) : z(()=>i.cancel(e), !0, e)), null;\n        }\n        if (void 0 !== a && (k = ()=>{\n            const e = void 0 !== a.reason ? a.reason : new Wt(\"Aborted\", \"AbortError\"), t = [];\n            o || t.push(()=>\"writable\" === R ? l.abort(e) : c(void 0)), n || t.push(()=>\"readable\" === v ? i.cancel(e) : c(void 0)), z(()=>Promise.all(t.map((e)=>e())), !0, e);\n        }, a.aborted ? k() : a.addEventListener(\"abort\", k)), Vt(e) && (v = e._state, s = e._storedError), Ge(t) && (R = t._state, _ = t._storedError, T = rt(t)), Vt(e) && Ge(t) && (q = !0, g()), \"errored\" === v) A(s);\n        else if (\"erroring\" === R || \"errored\" === R) j(_);\n        else if (\"closed\" === v) B();\n        else if (T || \"closed\" === R) {\n            const e = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n            n ? L(!0, e) : z(()=>i.cancel(e), !0, e);\n        }\n        function z(e, t, r) {\n            function o() {\n                return \"writable\" !== R || T ? n() : h(function() {\n                    let e;\n                    return c(function t() {\n                        if (e !== E) return e = E, p(E, t, t);\n                    }());\n                }(), n), null;\n            }\n            function n() {\n                return e ? b(e(), ()=>F(t, r), (e)=>F(!0, e)) : F(t, r), null;\n            }\n            w || (w = !0, q ? o() : h(C, o));\n        }\n        function L(e, t) {\n            z(void 0, e, t);\n        }\n        function F(e, t) {\n            return S = !0, l.releaseLock(), i.releaseLock(), void 0 !== a && a.removeEventListener(\"abort\", k), e ? W(t) : P(void 0), null;\n        }\n        w || (b(i.closed, B, A), b(l.closed, function() {\n            return S || (R = \"closed\"), null;\n        }, j)), q ? O() : y(()=>{\n            q = !0, g(), O();\n        });\n    });\n}\nfunction Ot(e, t) {\n    return function(e) {\n        try {\n            return e.getReader({\n                mode: \"byob\"\n            }).releaseLock(), !0;\n        } catch (e) {\n            return !1;\n        }\n    }(e) ? function(e) {\n        let t, r, o, n, a, i = e.getReader(), l = !1, s = !1, d = !1, f = !1, h = !1, p = !1;\n        const m = u((e)=>{\n            a = e;\n        });\n        function y(e) {\n            _(e.closed, (t)=>(e !== i || (o.error(t), n.error(t), h && p || a(void 0)), null));\n        }\n        function g() {\n            l && (i.releaseLock(), i = e.getReader(), y(i), l = !1), b(i.read(), (e)=>{\n                var t, r;\n                if (d = !1, f = !1, e.done) return h || o.close(), p || n.close(), null === (t = o.byobRequest) || void 0 === t || t.respond(0), null === (r = n.byobRequest) || void 0 === r || r.respond(0), h && p || a(void 0), null;\n                const l = e.value, u = l;\n                let c = l;\n                if (!h && !p) try {\n                    c = le(l);\n                } catch (e) {\n                    return o.error(e), n.error(e), a(i.cancel(e)), null;\n                }\n                return h || o.enqueue(u), p || n.enqueue(c), s = !1, d ? S() : f && v(), null;\n            }, ()=>(s = !1, null));\n        }\n        function w(t, r) {\n            l || (i.releaseLock(), i = e.getReader({\n                mode: \"byob\"\n            }), y(i), l = !0);\n            const u = r ? n : o, c = r ? o : n;\n            b(i.read(t), (e)=>{\n                var t;\n                d = !1, f = !1;\n                const o = r ? p : h, n = r ? h : p;\n                if (e.done) {\n                    o || u.close(), n || c.close();\n                    const r = e.value;\n                    return void 0 !== r && (o || u.byobRequest.respondWithNewView(r), n || null === (t = c.byobRequest) || void 0 === t || t.respond(0)), o && n || a(void 0), null;\n                }\n                const l = e.value;\n                if (n) o || u.byobRequest.respondWithNewView(l);\n                else {\n                    let e;\n                    try {\n                        e = le(l);\n                    } catch (e) {\n                        return u.error(e), c.error(e), a(i.cancel(e)), null;\n                    }\n                    o || u.byobRequest.respondWithNewView(l), c.enqueue(e);\n                }\n                return s = !1, d ? S() : f && v(), null;\n            }, ()=>(s = !1, null));\n        }\n        function S() {\n            if (s) return d = !0, c(void 0);\n            s = !0;\n            const e = o.byobRequest;\n            return null === e ? g() : w(e.view, !1), c(void 0);\n        }\n        function v() {\n            if (s) return f = !0, c(void 0);\n            s = !0;\n            const e = n.byobRequest;\n            return null === e ? g() : w(e.view, !0), c(void 0);\n        }\n        function R(e) {\n            if (h = !0, t = e, p) {\n                const e = [\n                    t,\n                    r\n                ], o = i.cancel(e);\n                a(o);\n            }\n            return m;\n        }\n        function T(e) {\n            if (p = !0, r = e, h) {\n                const e = [\n                    t,\n                    r\n                ], o = i.cancel(e);\n                a(o);\n            }\n            return m;\n        }\n        const q = new ReadableStream({\n            type: \"bytes\",\n            start (e) {\n                o = e;\n            },\n            pull: S,\n            cancel: R\n        }), C = new ReadableStream({\n            type: \"bytes\",\n            start (e) {\n                n = e;\n            },\n            pull: v,\n            cancel: T\n        });\n        return y(i), [\n            q,\n            C\n        ];\n    }(e) : function(e, t) {\n        const r = e.getReader();\n        let o, n, a, i, l, s = !1, d = !1, f = !1, h = !1;\n        const p = u((e)=>{\n            l = e;\n        });\n        function m() {\n            return s ? (d = !0, c(void 0)) : (s = !0, b(r.read(), (e)=>{\n                if (d = !1, e.done) return f || a.close(), h || i.close(), f && h || l(void 0), null;\n                const t = e.value, r = t, o = t;\n                return f || a.enqueue(r), h || i.enqueue(o), s = !1, d && m(), null;\n            }, ()=>(s = !1, null)), c(void 0));\n        }\n        function y(e) {\n            if (f = !0, o = e, h) {\n                const e = [\n                    o,\n                    n\n                ], t = r.cancel(e);\n                l(t);\n            }\n            return p;\n        }\n        function g(e) {\n            if (h = !0, n = e, f) {\n                const e = [\n                    o,\n                    n\n                ], t = r.cancel(e);\n                l(t);\n            }\n            return p;\n        }\n        const w = new ReadableStream({\n            start (e) {\n                a = e;\n            },\n            pull: m,\n            cancel: y\n        }), S = new ReadableStream({\n            start (e) {\n                i = e;\n            },\n            pull: m,\n            cancel: g\n        });\n        return _(r.closed, (e)=>(a.error(e), i.error(e), f && h || l(void 0), null)), [\n            w,\n            S\n        ];\n    }(e);\n}\nclass ReadableStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get desiredSize() {\n        if (!Bt(this)) throw Dt(\"desiredSize\");\n        return Lt(this);\n    }\n    close() {\n        if (!Bt(this)) throw Dt(\"close\");\n        if (!Ft(this)) throw new TypeError(\"The stream is not in a state that permits close\");\n        !function(e) {\n            if (!Ft(e)) return;\n            const t = e._controlledReadableStream;\n            e._closeRequested = !0, 0 === e._queue.length && (jt(e), Xt(t));\n        }(this);\n    }\n    enqueue(e) {\n        if (!Bt(this)) throw Dt(\"enqueue\");\n        if (!Ft(this)) throw new TypeError(\"The stream is not in a state that permits enqueue\");\n        return function(e, t) {\n            if (!Ft(e)) return;\n            const r = e._controlledReadableStream;\n            if (Ut(r) && X(r) > 0) G(r, t, !1);\n            else {\n                let r;\n                try {\n                    r = e._strategySizeAlgorithm(t);\n                } catch (t) {\n                    throw zt(e, t), t;\n                }\n                try {\n                    ue(e, t, r);\n                } catch (t) {\n                    throw zt(e, t), t;\n                }\n            }\n            At(e);\n        }(this, e);\n    }\n    error(e) {\n        if (!Bt(this)) throw Dt(\"error\");\n        zt(this, e);\n    }\n    [T](e) {\n        ce(this);\n        const t = this._cancelAlgorithm(e);\n        return jt(this), t;\n    }\n    [q](e) {\n        const t = this._controlledReadableStream;\n        if (this._queue.length > 0) {\n            const r = se(this);\n            this._closeRequested && 0 === this._queue.length ? (jt(this), Xt(t)) : At(this), e._chunkSteps(r);\n        } else U(t, e), At(this);\n    }\n    [C]() {}\n}\nfunction Bt(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledReadableStream\") && e instanceof ReadableStreamDefaultController;\n}\nfunction At(e) {\n    const t = function(e) {\n        const t = e._controlledReadableStream;\n        if (!Ft(e)) return !1;\n        if (!e._started) return !1;\n        if (Ut(t) && X(t) > 0) return !0;\n        if (Lt(e) > 0) return !0;\n        return !1;\n    }(e);\n    if (!t) return;\n    if (e._pulling) return void (e._pullAgain = !0);\n    e._pulling = !0;\n    b(e._pullAlgorithm(), ()=>(e._pulling = !1, e._pullAgain && (e._pullAgain = !1, At(e)), null), (t)=>(zt(e, t), null));\n}\nfunction jt(e) {\n    e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0, e._strategySizeAlgorithm = void 0;\n}\nfunction zt(e, t) {\n    const r = e._controlledReadableStream;\n    \"readable\" === r._state && (ce(e), jt(e), Jt(r, t));\n}\nfunction Lt(e) {\n    const t = e._controlledReadableStream._state;\n    return \"errored\" === t ? null : \"closed\" === t ? 0 : e._strategyHWM - e._queueTotalSize;\n}\nfunction Ft(e) {\n    return !e._closeRequested && \"readable\" === e._controlledReadableStream._state;\n}\nfunction It(e, t, r, o) {\n    const n = Object.create(ReadableStreamDefaultController.prototype);\n    let a, i, l;\n    a = void 0 !== t.start ? ()=>t.start(n) : ()=>{}, i = void 0 !== t.pull ? ()=>t.pull(n) : ()=>c(void 0), l = void 0 !== t.cancel ? (e)=>t.cancel(e) : ()=>c(void 0), function(e, t, r, o, n, a, i) {\n        t._controlledReadableStream = e, t._queue = void 0, t._queueTotalSize = void 0, ce(t), t._started = !1, t._closeRequested = !1, t._pullAgain = !1, t._pulling = !1, t._strategySizeAlgorithm = i, t._strategyHWM = a, t._pullAlgorithm = o, t._cancelAlgorithm = n, e._readableStreamController = t, b(c(r()), ()=>(t._started = !0, At(t), null), (e)=>(zt(t, e), null));\n    }(e, n, a, i, l, r, o);\n}\nfunction Dt(e) {\n    return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`);\n}\nfunction $t(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction Mt(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction Yt(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction Qt(e, t) {\n    if (\"bytes\" !== (e = `${e}`)) throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);\n    return e;\n}\nfunction Nt(e, t) {\n    if (\"byob\" !== (e = `${e}`)) throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);\n    return e;\n}\nfunction Ht(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.preventAbort, o = null == e ? void 0 : e.preventCancel, n = null == e ? void 0 : e.preventClose, a = null == e ? void 0 : e.signal;\n    return void 0 !== a && function(e, t) {\n        if (!function(e) {\n            if (\"object\" != typeof e || null === e) return !1;\n            try {\n                return \"boolean\" == typeof e.aborted;\n            } catch (e) {\n                return !1;\n            }\n        }(e)) throw new TypeError(`${t} is not an AbortSignal.`);\n    }(a, `${t} has member 'signal' that`), {\n        preventAbort: Boolean(r),\n        preventCancel: Boolean(o),\n        preventClose: Boolean(n),\n        signal: a\n    };\n}\nfunction xt(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.readable;\n    M(r, \"readable\", \"ReadableWritablePair\"), function(e, t) {\n        if (!H(e)) throw new TypeError(`${t} is not a ReadableStream.`);\n    }(r, `${t} has member 'readable' that`);\n    const o = null == e ? void 0 : e.writable;\n    return M(o, \"writable\", \"ReadableWritablePair\"), function(e, t) {\n        if (!x(e)) throw new TypeError(`${t} is not a WritableStream.`);\n    }(o, `${t} has member 'writable' that`), {\n        readable: r,\n        writable: o\n    };\n}\nObject.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n        enumerable: !0\n    },\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(ReadableStreamDefaultController.prototype.close, \"close\"), n(ReadableStreamDefaultController.prototype.enqueue, \"enqueue\"), n(ReadableStreamDefaultController.prototype.error, \"error\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStreamDefaultController.prototype, e.toStringTag, {\n    value: \"ReadableStreamDefaultController\",\n    configurable: !0\n});\nclass ReadableStream {\n    constructor(e = {}, t = {}){\n        void 0 === e ? e = null : D(e, \"First parameter\");\n        const r = Ye(t, \"Second parameter\"), o = function(e, t) {\n            F(e, t);\n            const r = e, o = null == r ? void 0 : r.autoAllocateChunkSize, n = null == r ? void 0 : r.cancel, a = null == r ? void 0 : r.pull, i = null == r ? void 0 : r.start, l = null == r ? void 0 : r.type;\n            return {\n                autoAllocateChunkSize: void 0 === o ? void 0 : N(o, `${t} has member 'autoAllocateChunkSize' that`),\n                cancel: void 0 === n ? void 0 : $t(n, r, `${t} has member 'cancel' that`),\n                pull: void 0 === a ? void 0 : Mt(a, r, `${t} has member 'pull' that`),\n                start: void 0 === i ? void 0 : Yt(i, r, `${t} has member 'start' that`),\n                type: void 0 === l ? void 0 : Qt(l, `${t} has member 'type' that`)\n            };\n        }(e, \"First parameter\");\n        var n;\n        if ((n = this)._state = \"readable\", n._reader = void 0, n._storedError = void 0, n._disturbed = !1, \"bytes\" === o.type) {\n            if (void 0 !== r.size) throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n            Oe(this, o, $e(r, 0));\n        } else {\n            const e = Me(r);\n            It(this, o, $e(r, 1), e);\n        }\n    }\n    get locked() {\n        if (!Vt(this)) throw Kt(\"locked\");\n        return Ut(this);\n    }\n    cancel(e) {\n        return Vt(this) ? Ut(this) ? d(new TypeError(\"Cannot cancel a stream that already has a reader\")) : Gt(this, e) : d(Kt(\"cancel\"));\n    }\n    getReader(e) {\n        if (!Vt(this)) throw Kt(\"getReader\");\n        return void 0 === function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.mode;\n            return {\n                mode: void 0 === r ? void 0 : Nt(r, `${t} has member 'mode' that`)\n            };\n        }(e, \"First parameter\").mode ? new ReadableStreamDefaultReader(this) : function(e) {\n            return new ReadableStreamBYOBReader(e);\n        }(this);\n    }\n    pipeThrough(e, t = {}) {\n        if (!H(this)) throw Kt(\"pipeThrough\");\n        $(e, 1, \"pipeThrough\");\n        const r = xt(e, \"First parameter\"), o = Ht(t, \"Second parameter\");\n        if (this.locked) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n        if (r.writable.locked) throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n        return m(kt(this, r.writable, o.preventClose, o.preventAbort, o.preventCancel, o.signal)), r.readable;\n    }\n    pipeTo(e, t = {}) {\n        if (!H(this)) return d(Kt(\"pipeTo\"));\n        if (void 0 === e) return d(\"Parameter 1 is required in 'pipeTo'.\");\n        if (!x(e)) return d(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n        let r;\n        try {\n            r = Ht(t, \"Second parameter\");\n        } catch (e) {\n            return d(e);\n        }\n        return this.locked ? d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")) : e.locked ? d(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")) : kt(this, e, r.preventClose, r.preventAbort, r.preventCancel, r.signal);\n    }\n    tee() {\n        if (!H(this)) throw Kt(\"tee\");\n        if (this.locked) throw new TypeError(\"Cannot tee a stream that already has a reader\");\n        return Ot(this);\n    }\n    values(e) {\n        if (!H(this)) throw Kt(\"values\");\n        return function(e, t) {\n            const r = e.getReader(), o = new te(r, t), n = Object.create(re);\n            return n._asyncIteratorImpl = o, n;\n        }(this, function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.preventCancel;\n            return {\n                preventCancel: Boolean(r)\n            };\n        }(e, \"First parameter\").preventCancel);\n    }\n}\nfunction Vt(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_readableStreamController\") && e instanceof ReadableStream;\n}\nfunction Ut(e) {\n    return void 0 !== e._reader;\n}\nfunction Gt(e, r) {\n    if (e._disturbed = !0, \"closed\" === e._state) return c(void 0);\n    if (\"errored\" === e._state) return d(e._storedError);\n    Xt(e);\n    const o = e._reader;\n    if (void 0 !== o && Fe(o)) {\n        const e = o._readIntoRequests;\n        o._readIntoRequests = new S, e.forEach((e)=>{\n            e._closeSteps(void 0);\n        });\n    }\n    return p(e._readableStreamController[T](r), t);\n}\nfunction Xt(e) {\n    e._state = \"closed\";\n    const t = e._reader;\n    if (void 0 !== t && (j(t), K(t))) {\n        const e = t._readRequests;\n        t._readRequests = new S, e.forEach((e)=>{\n            e._closeSteps();\n        });\n    }\n}\nfunction Jt(e, t) {\n    e._state = \"errored\", e._storedError = t;\n    const r = e._reader;\n    void 0 !== r && (A(r, t), K(r) ? Z(r, t) : Ie(r, t));\n}\nfunction Kt(e) {\n    return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`);\n}\nfunction Zt(e, t) {\n    F(e, t);\n    const r = null == e ? void 0 : e.highWaterMark;\n    return M(r, \"highWaterMark\", \"QueuingStrategyInit\"), {\n        highWaterMark: Y(r)\n    };\n}\nObject.defineProperties(ReadableStream.prototype, {\n    cancel: {\n        enumerable: !0\n    },\n    getReader: {\n        enumerable: !0\n    },\n    pipeThrough: {\n        enumerable: !0\n    },\n    pipeTo: {\n        enumerable: !0\n    },\n    tee: {\n        enumerable: !0\n    },\n    values: {\n        enumerable: !0\n    },\n    locked: {\n        enumerable: !0\n    }\n}), n(ReadableStream.prototype.cancel, \"cancel\"), n(ReadableStream.prototype.getReader, \"getReader\"), n(ReadableStream.prototype.pipeThrough, \"pipeThrough\"), n(ReadableStream.prototype.pipeTo, \"pipeTo\"), n(ReadableStream.prototype.tee, \"tee\"), n(ReadableStream.prototype.values, \"values\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ReadableStream.prototype, e.toStringTag, {\n    value: \"ReadableStream\",\n    configurable: !0\n}), \"symbol\" == typeof e.asyncIterator && Object.defineProperty(ReadableStream.prototype, e.asyncIterator, {\n    value: ReadableStream.prototype.values,\n    writable: !0,\n    configurable: !0\n});\nconst er = (e)=>e.byteLength;\nn(er, \"size\");\nclass ByteLengthQueuingStrategy {\n    constructor(e){\n        $(e, 1, \"ByteLengthQueuingStrategy\"), e = Zt(e, \"First parameter\"), this._byteLengthQueuingStrategyHighWaterMark = e.highWaterMark;\n    }\n    get highWaterMark() {\n        if (!rr(this)) throw tr(\"highWaterMark\");\n        return this._byteLengthQueuingStrategyHighWaterMark;\n    }\n    get size() {\n        if (!rr(this)) throw tr(\"size\");\n        return er;\n    }\n}\nfunction tr(e) {\n    return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`);\n}\nfunction rr(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_byteLengthQueuingStrategyHighWaterMark\") && e instanceof ByteLengthQueuingStrategy;\n}\nObject.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n        enumerable: !0\n    },\n    size: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(ByteLengthQueuingStrategy.prototype, e.toStringTag, {\n    value: \"ByteLengthQueuingStrategy\",\n    configurable: !0\n});\nconst or = ()=>1;\nn(or, \"size\");\nclass CountQueuingStrategy {\n    constructor(e){\n        $(e, 1, \"CountQueuingStrategy\"), e = Zt(e, \"First parameter\"), this._countQueuingStrategyHighWaterMark = e.highWaterMark;\n    }\n    get highWaterMark() {\n        if (!ar(this)) throw nr(\"highWaterMark\");\n        return this._countQueuingStrategyHighWaterMark;\n    }\n    get size() {\n        if (!ar(this)) throw nr(\"size\");\n        return or;\n    }\n}\nfunction nr(e) {\n    return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`);\n}\nfunction ar(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_countQueuingStrategyHighWaterMark\") && e instanceof CountQueuingStrategy;\n}\nfunction ir(e, t, r) {\n    return I(e, r), (r)=>w(e, t, [\n            r\n        ]);\n}\nfunction lr(e, t, r) {\n    return I(e, r), (r)=>g(e, t, [\n            r\n        ]);\n}\nfunction sr(e, t, r) {\n    return I(e, r), (r, o)=>w(e, t, [\n            r,\n            o\n        ]);\n}\nObject.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n        enumerable: !0\n    },\n    size: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(CountQueuingStrategy.prototype, e.toStringTag, {\n    value: \"CountQueuingStrategy\",\n    configurable: !0\n});\nclass TransformStream {\n    constructor(e = {}, t = {}, r = {}){\n        void 0 === e && (e = null);\n        const o = Ye(t, \"Second parameter\"), n = Ye(r, \"Third parameter\"), a = function(e, t) {\n            F(e, t);\n            const r = null == e ? void 0 : e.flush, o = null == e ? void 0 : e.readableType, n = null == e ? void 0 : e.start, a = null == e ? void 0 : e.transform, i = null == e ? void 0 : e.writableType;\n            return {\n                flush: void 0 === r ? void 0 : ir(r, e, `${t} has member 'flush' that`),\n                readableType: o,\n                start: void 0 === n ? void 0 : lr(n, e, `${t} has member 'start' that`),\n                transform: void 0 === a ? void 0 : sr(a, e, `${t} has member 'transform' that`),\n                writableType: i\n            };\n        }(e, \"First parameter\");\n        if (void 0 !== a.readableType) throw new RangeError(\"Invalid readableType specified\");\n        if (void 0 !== a.writableType) throw new RangeError(\"Invalid writableType specified\");\n        const i = $e(n, 0), l = Me(n), s = $e(o, 1), f = Me(o);\n        let b;\n        !function(e, t, r, o, n, a) {\n            function i() {\n                return t;\n            }\n            function l(t) {\n                return function(e, t) {\n                    const r = e._transformStreamController;\n                    if (e._backpressure) {\n                        return p(e._backpressureChangePromise, ()=>{\n                            if (\"erroring\" === (Ge(e._writable) ? e._writable._state : e._writableState)) throw Ge(e._writable) ? e._writable._storedError : e._writableStoredError;\n                            return pr(r, t);\n                        });\n                    }\n                    return pr(r, t);\n                }(e, t);\n            }\n            function s(t) {\n                return function(e, t) {\n                    return cr(e, t), c(void 0);\n                }(e, t);\n            }\n            function u() {\n                return function(e) {\n                    const t = e._transformStreamController, r = t._flushAlgorithm();\n                    return hr(t), p(r, ()=>{\n                        if (\"errored\" === e._readableState) throw e._readableStoredError;\n                        gr(e) && wr(e);\n                    }, (t)=>{\n                        throw cr(e, t), e._readableStoredError;\n                    });\n                }(e);\n            }\n            function d() {\n                return function(e) {\n                    return fr(e, !1), e._backpressureChangePromise;\n                }(e);\n            }\n            function f(t) {\n                return dr(e, t), c(void 0);\n            }\n            e._writableState = \"writable\", e._writableStoredError = void 0, e._writableHasInFlightOperation = !1, e._writableStarted = !1, e._writable = function(e, t, r, o, n, a, i) {\n                return new WritableStream({\n                    start (r) {\n                        e._writableController = r;\n                        try {\n                            const t = r.signal;\n                            void 0 !== t && t.addEventListener(\"abort\", ()=>{\n                                \"writable\" === e._writableState && (e._writableState = \"erroring\", t.reason && (e._writableStoredError = t.reason));\n                            });\n                        } catch (e) {}\n                        return p(t(), ()=>(e._writableStarted = !0, Cr(e), null), (t)=>{\n                            throw e._writableStarted = !0, Rr(e, t), t;\n                        });\n                    },\n                    write: (t)=>((function(e) {\n                            e._writableHasInFlightOperation = !0;\n                        })(e), p(r(t), ()=>((function(e) {\n                                e._writableHasInFlightOperation = !1;\n                            })(e), Cr(e), null), (t)=>{\n                            throw function(e, t) {\n                                e._writableHasInFlightOperation = !1, Rr(e, t);\n                            }(e, t), t;\n                        })),\n                    close: ()=>((function(e) {\n                            e._writableHasInFlightOperation = !0;\n                        })(e), p(o(), ()=>((function(e) {\n                                e._writableHasInFlightOperation = !1;\n                                \"erroring\" === e._writableState && (e._writableStoredError = void 0);\n                                e._writableState = \"closed\";\n                            })(e), null), (t)=>{\n                            throw function(e, t) {\n                                e._writableHasInFlightOperation = !1, e._writableState, Rr(e, t);\n                            }(e, t), t;\n                        })),\n                    abort: (t)=>(e._writableState = \"errored\", e._writableStoredError = t, n(t))\n                }, {\n                    highWaterMark: a,\n                    size: i\n                });\n            }(e, i, l, u, s, r, o), e._readableState = \"readable\", e._readableStoredError = void 0, e._readableCloseRequested = !1, e._readablePulling = !1, e._readable = function(e, t, r, o, n, a) {\n                return new ReadableStream({\n                    start: (r)=>(e._readableController = r, t().catch((t)=>{\n                            Sr(e, t);\n                        })),\n                    pull: ()=>(e._readablePulling = !0, r().catch((t)=>{\n                            Sr(e, t);\n                        })),\n                    cancel: (t)=>(e._readableState = \"closed\", o(t))\n                }, {\n                    highWaterMark: n,\n                    size: a\n                });\n            }(e, i, d, f, n, a), e._backpressure = void 0, e._backpressureChangePromise = void 0, e._backpressureChangePromise_resolve = void 0, fr(e, !0), e._transformStreamController = void 0;\n        }(this, u((e)=>{\n            b = e;\n        }), s, f, i, l), function(e, t) {\n            const r = Object.create(TransformStreamDefaultController.prototype);\n            let o, n;\n            o = void 0 !== t.transform ? (e)=>t.transform(e, r) : (e)=>{\n                try {\n                    return _r(r, e), c(void 0);\n                } catch (e) {\n                    return d(e);\n                }\n            };\n            n = void 0 !== t.flush ? ()=>t.flush(r) : ()=>c(void 0);\n            !function(e, t, r, o) {\n                t._controlledTransformStream = e, e._transformStreamController = t, t._transformAlgorithm = r, t._flushAlgorithm = o;\n            }(e, r, o, n);\n        }(this, a), void 0 !== a.start ? b(a.start(this._transformStreamController)) : b(void 0);\n    }\n    get readable() {\n        if (!ur(this)) throw yr(\"readable\");\n        return this._readable;\n    }\n    get writable() {\n        if (!ur(this)) throw yr(\"writable\");\n        return this._writable;\n    }\n}\nfunction ur(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_transformStreamController\") && e instanceof TransformStream;\n}\nfunction cr(e, t) {\n    Sr(e, t), dr(e, t);\n}\nfunction dr(e, t) {\n    hr(e._transformStreamController), function(e, t) {\n        e._writableController.error(t);\n        \"writable\" === e._writableState && Tr(e, t);\n    }(e, t), e._backpressure && fr(e, !1);\n}\nfunction fr(e, t) {\n    void 0 !== e._backpressureChangePromise && e._backpressureChangePromise_resolve(), e._backpressureChangePromise = u((t)=>{\n        e._backpressureChangePromise_resolve = t;\n    }), e._backpressure = t;\n}\nObject.defineProperties(TransformStream.prototype, {\n    readable: {\n        enumerable: !0\n    },\n    writable: {\n        enumerable: !0\n    }\n}), \"symbol\" == typeof e.toStringTag && Object.defineProperty(TransformStream.prototype, e.toStringTag, {\n    value: \"TransformStream\",\n    configurable: !0\n});\nclass TransformStreamDefaultController {\n    constructor(){\n        throw new TypeError(\"Illegal constructor\");\n    }\n    get desiredSize() {\n        if (!br(this)) throw mr(\"desiredSize\");\n        return vr(this._controlledTransformStream);\n    }\n    enqueue(e) {\n        if (!br(this)) throw mr(\"enqueue\");\n        _r(this, e);\n    }\n    error(e) {\n        if (!br(this)) throw mr(\"error\");\n        var t;\n        t = e, cr(this._controlledTransformStream, t);\n    }\n    terminate() {\n        if (!br(this)) throw mr(\"terminate\");\n        !function(e) {\n            const t = e._controlledTransformStream;\n            gr(t) && wr(t);\n            const r = new TypeError(\"TransformStream terminated\");\n            dr(t, r);\n        }(this);\n    }\n}\nfunction br(e) {\n    return !!r(e) && !!Object.prototype.hasOwnProperty.call(e, \"_controlledTransformStream\") && e instanceof TransformStreamDefaultController;\n}\nfunction hr(e) {\n    e._transformAlgorithm = void 0, e._flushAlgorithm = void 0;\n}\nfunction _r(e, t) {\n    const r = e._controlledTransformStream;\n    if (!gr(r)) throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n    try {\n        !function(e, t) {\n            e._readablePulling = !1;\n            try {\n                e._readableController.enqueue(t);\n            } catch (t) {\n                throw Sr(e, t), t;\n            }\n        }(r, t);\n    } catch (e) {\n        throw dr(r, e), r._readableStoredError;\n    }\n    const o = function(e) {\n        return !function(e) {\n            if (!gr(e)) return !1;\n            if (e._readablePulling) return !0;\n            if (vr(e) > 0) return !0;\n            return !1;\n        }(e);\n    }(r);\n    o !== r._backpressure && fr(r, !0);\n}\nfunction pr(e, t) {\n    return p(e._transformAlgorithm(t), void 0, (t)=>{\n        throw cr(e._controlledTransformStream, t), t;\n    });\n}\nfunction mr(e) {\n    return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`);\n}\nfunction yr(e) {\n    return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`);\n}\nfunction gr(e) {\n    return !e._readableCloseRequested && \"readable\" === e._readableState;\n}\nfunction wr(e) {\n    e._readableState = \"closed\", e._readableCloseRequested = !0, e._readableController.close();\n}\nfunction Sr(e, t) {\n    \"readable\" === e._readableState && (e._readableState = \"errored\", e._readableStoredError = t), e._readableController.error(t);\n}\nfunction vr(e) {\n    return e._readableController.desiredSize;\n}\nfunction Rr(e, t) {\n    \"writable\" !== e._writableState ? qr(e) : Tr(e, t);\n}\nfunction Tr(e, t) {\n    e._writableState = \"erroring\", e._writableStoredError = t, !function(e) {\n        return e._writableHasInFlightOperation;\n    }(e) && e._writableStarted && qr(e);\n}\nfunction qr(e) {\n    e._writableState = \"errored\";\n}\nfunction Cr(e) {\n    \"erroring\" === e._writableState && qr(e);\n}\nObject.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n        enumerable: !0\n    },\n    error: {\n        enumerable: !0\n    },\n    terminate: {\n        enumerable: !0\n    },\n    desiredSize: {\n        enumerable: !0\n    }\n}), n(TransformStreamDefaultController.prototype.enqueue, \"enqueue\"), n(TransformStreamDefaultController.prototype.error, \"error\"), n(TransformStreamDefaultController.prototype.terminate, \"terminate\"), \"symbol\" == typeof e.toStringTag && Object.defineProperty(TransformStreamDefaultController.prototype, e.toStringTag, {\n    value: \"TransformStreamDefaultController\",\n    configurable: !0\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/web-streams-polyfill/dist/ponyfill.mjs\n");

/***/ })

};
;